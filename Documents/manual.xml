<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"
"http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd">
<book>
  <title>Veusz - a scientific plotting package</title>

  <bookinfo>
    <author>
      <firstname>Jeremy</firstname>

      <surname>Sanders</surname>

      <email>jeremy@jeremysanders.net</email>
    </author>

    <copyright>
      <year>2005</year>
    </copyright>

    <legalnotice>
      <para>This document is released under the GNU Free Documention
      Licence, Version 1.1 or any later version published by the Free
      Software Foundation; with no Invariant Sections, no Front-Cover
      Texts. and no Back-Cover Texts.</para>
    </legalnotice>
  </bookinfo>

  <chapter>
    <title>Introduction</title>

    <section>
      <title>Starting the program</title>

      <para>You should start the script veusz.py from the main veusz
      directory</para>
    </section>
  </chapter>

  <chapter>
    <title>Command line interface</title>

    <section>
      <title>Introduction</title>

      <para>An alternative way to control Veusz is via its command
      line interface. As Veusz is a a Python application it uses
      Python as its scripting language. Therefore you can freely mix
      Veusz and Python commands on the command line. Veusz can also
      read in Python scripts from files (see the <link
      linkend="Command.Load">Load</link> command).</para>

      <para>When commands are entered in the command prompt in the
      Veusz window, Veusz supports a simplified command syntax, where
      brackets following commands names, and commas, can replaced by
      spaces in Veusz commands (not Python commands). For example,
      <command>Add('graph', name='foo')</command>, may be entered as
      <command>Add 'graph' name='foo'</command>.</para>

      <para>The command prompt supports history (use the up and down cursor
      keys to recall previous commands). </para>
    </section>
  </chapter>

  <chapter>
    <title>Reading data</title>
    <section>
      <title><anchor id="Descriptors" />Descriptors</title>
      <para>Foo bar</para>
    </section>
  </chapter>

  <chapter>
    <title>Commands</title>
    
    <para>We list the allowed set of commands below</para>
    
    <section>
      <title><anchor id="Command.Action" />Action</title>
      
      <para><command>Action('actionname',
	widgetpath='.')</command></para>
      
      <para>Initiates the specified action on the widget given
	the action name. Actions perform certain automated
	routines. These include "fit" on a fit widget, and
	"zeroMargins" on grids.</para>
    </section>

    <section>
      <title><anchor id="Command.Add" />Add</title>
      
      <para><command>Add('widgettype', name='nameforwidget',
        autoadd=True, optionalargs)</command></para>
      
      <para>The Add command adds a graph into the current widget
        (See the <link linkend="Command.To">To</link> command to change
        the current position).</para>
      
      <para>The first argument is the type of widget to add. These
        include "graph", "page", "axis", "xy" and
        "grid". <command>name</command> is the name of the new widget
        (if not given, it will be generated from the type of the
        widget plus a number). The <command>autoadd</command>
        parameter if set, constructs the default sub-widgets this
        widget has (for example, axes in a graph).</para>
      
      <para>Optionally, default values for the graph settings may be
        given, for example <command>Add('axis', name='y',
        direction='vertical')</command>.</para>
      
      <para>Returns: Name of widget added.</para>
    </section>

    <section>
      <title><anchor id="Command.Export" />Export</title>

      <para><command>Export(filename, color=True,
      page=0)</command></para>

      <para>Export the page given to the filename given. The
      <command>filename</command> must end with the correct extension
      to get the right sort of output file. Currrenly supported
      extensions are '.eps' and '.png'. If <command>color</command> is
      True, then the output is in colour, else
      greyscale. <command>page</command> is the page number of the
      document to export (starting from 0 for the first page!).</para>
    </section>

    <section>
      <title><anchor id="Command.Get" />Get</title>

      <para><command>Get('settingpath')</command></para>

      <para>Returns: The value of the setting given by the path.</para>

      <informalexample>
	<programlisting>
>>> Get('/page1/graph1/x/min')
'Auto'
</programlisting>
      </informalexample>
    </section>

    </section>
    
    <section>
      <title><anchor id="Command.GetChildren" />GetChildren</title>

      <para><command>GetChildren(where='.')</command></para>

      <para>Returns: The names of the widgets which are children of
      the path given</para>
    </section>

    <section>
      <title><anchor id="Command.GetData" />GetData</title>
      <para><command>GetData(name)</command></para>

      <para>Returns: A tuple containing the datasets with the name
      given. The tuple is (data, symerr, negerr, poserr), with each a
      numarray of the same size or None. data are the values of the
      dataset, symerr are the symmetric errors (if set), negerr and
      poserr and negative and positive asymmetric errors (if
      set).</para>

      <informalexample>
	<programlisting>
data = GetData('x')
SetData('x', data[0]*0.1, *data[1:])
</programlisting>
      </informalexample>
    </section>

    <section>
      <title><anchor id="Command.GetDatasets" />GetDatasets</title>

      <para><command>GetDatasets()</command></para>

      <para>Returns: The names of the datasets in the current
      document.</para>
    </section>

    <section>
      <title><anchor id="Command.GPL" />GPL</title>

      <para><command>GPL()</command></para>

      <para>Print out the GNU Public Licence, which Veusz is licenced
      under.</para>
    </section>

    <section>
      <title><anchor id="Command.ImportFile" />ImportFile</title>
      
      <para><command>ImportFile('filename',
	'descriptor')</command></para>
      
      <para>Imports data from a file. The arguments are the filename
	to load data from and the descriptor.</para>
      
      <para>The format of the descriptor is a list of variable names
        representing the columns of the data. For more information see
        <link linkend="Descriptors">Descriptors</link>.</para>

      <para>Returns: list of datasets imported.</para>
    </section>
    
    <section>
      <title><anchor id="Command.ImportString" />ImportString</title>
      
      <para><command>ImportString('descriptor',
	'data')</command></para>
      
      <para>Like, <link
	linkend="Command.ImportFile">ImportFile</link>, but loads the
	data from the specfied string rather than a file. This allows
	data to be easily embedded within a document. The data string is
	usually a multi-line Python string.</para>
      
      <para>Returns: list of datasets imported.</para>

      <informalexample>
	<programlisting>
ImportString('x y', '''
1   2
2   5
3   10
''')
</programlisting>
      </informalexample>

    </section>
    
    <section>
      <title><anchor id="Command.List" />List</title>
      
      <para><command>List(where='.')</command></para>
      
      <para>List the widgets which are contained within the widget
      with the path given, the type of widgets, and a brief
      description.</para>
    </section>

    <section>
      <title><anchor id="Command.Load" />Load</title>
      
      <para><command>Load('filename.vsz')</command></para>
      
      <para>Loads the veusz script file given. The script file can
	be any Python code. The code is executed using the Veusz
	interpreter.</para>
      
      <para>Note: this command is only supported at the command line
	and not in a script. Scripts may use the python
	<command>execfile</command> function instead.</para>
    </section>
    
    <section>
      <title><anchor id="Command.Remove" />Remove</title>
      
      <para><command>Remove('widgetpath')</command></para>
      
      <para>Remove the widget selected using the path. See <link
	linkend="Command.To">To</link> for a description of the path
	syntax.</para>
    </section>

    <section>
      <title><anchor id="Command.Save" />Save</title>
      
      <para><command>Save('filename.vsz')</command></para>
      
      <para>Save the current document under the filename
	given.</para>
    </section>
    
    <section>
      <title><anchor id="Command.Set" />Set</title>
      
      <para><command>Set('settingpath', val)</command></para>
      
      <para>Set the setting given by the path to the value given. If
	the type of <command>val</command> is incorrect, an
	<command>InvalidType</command> exception is thrown. The path
	to the setting is the optional path to the widget the setting
	is contained within, an optional subsetting specifier, and the
	setting itself.</para>

      <informalexample>
	<programlisting>
Set('page1/graph1/x/min', -10.)
</programlisting>
      </informalexample>

    </section>

    <section>
      <title><anchor id="Command.SetData" />Set</title>
      
      <para><command>SetData(name, val, symerr=None, negerr=None,
      poserr=None)</command></para>

      <para>Set the dataset name with the values given. If None is
      given for an item, it will be left blank. val is the actual
      data, symerr are the symmetric errors, negerr and poserr and the
      getative and positive asymmetric errors. The data can be given
      as lists or numarrays.</para>
    </section>
    
    <section>
      <title><anchor id="Command.SetVerbose" />SetVerbose</title>
      
      <para><command>SetVerbose(v=True)</command></para>
      
      <para>If <command>v</command> is <command>True</command>, then extra
	information is printed out by commands.</para>
    </section>
    
    <section>
      <title><anchor id="Command.To" />To</title>
      
      <para><command>To('widgetpath')</command></para>
      
      <para>The To command takes a path to a widget and moves to
        that widget. For example, this may be "/", the root widget,
        "graph1", "/page1/graph1/x", "../x". The syntax is designed to
        mimic Unix paths for files. "/" represents the base widget
        (where the pages reside), and ".." represents the widget next
        up the tree.</para>
      
    </section>
    
  </chapter>
  
</book>
